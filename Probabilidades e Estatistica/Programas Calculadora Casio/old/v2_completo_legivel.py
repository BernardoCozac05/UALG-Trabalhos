
import math

# --- TABELA CHI2 (df 1 a 100, alpha em 11 níveis) ---
def chi2_tabela(df, alpha):
    tabela = {
        1: {0.995: 0.0},
        2: {0.995: 0.01, 0.990: 0.02, 0.975: 0.05, 0.950: 0.1, 0.900: 0.21, 0.500: 1.39, 0.100: 4.61, 0.050: 5.99, 0.025: 7.38, 0.010: 9.21, 0.005: 10.6},
        3: {0.995: 0.07, 0.990: 0.11, 0.975: 0.22, 0.950: 0.35, 0.900: 0.58, 0.500: 2.37, 0.100: 6.25, 0.050: 7.81, 0.025: 9.35, 0.010: 11.34, 0.005: 12.84},
        4: {0.995: 0.21, 0.990: 0.3, 0.975: 0.48, 0.950: 0.71, 0.900: 1.06, 0.500: 3.36, 0.100: 7.78, 0.050: 9.49, 0.025: 11.14, 0.010: 13.28, 0.005: 14.86},
        5: {0.995: 0.41, 0.990: 0.55, 0.975: 0.83, 0.950: 1.15, 0.900: 1.61, 0.500: 4.35, 0.100: 9.24, 0.050: 11.07, 0.025: 12.83, 0.010: 15.09, 0.005: 16.75},
        6: {0.995: 0.68, 0.990: 0.87, 0.975: 1.24, 0.950: 1.64, 0.900: 2.2, 0.500: 5.35, 0.100: 10.65, 0.050: 12.59, 0.025: 14.45, 0.010: 16.81, 0.005: 18.55},
        7: {0.995: 0.99, 0.990: 1.24, 0.975: 1.69, 0.950: 2.17, 0.900: 2.83, 0.500: 6.35, 0.100: 12.02, 0.050: 14.07, 0.025: 16.01, 0.010: 18.48, 0.005: 20.28},
        8: {0.995: 1.34, 0.990: 1.65, 0.975: 2.18, 0.950: 2.73, 0.900: 3.49, 0.500: 7.34, 0.100: 13.36, 0.050: 15.51, 0.025: 17.53, 0.010: 20.09, 0.005: 21.96},
        9: {0.995: 1.73, 0.990: 2.09, 0.975: 2.7, 0.950: 3.33, 0.900: 4.17, 0.500: 8.34, 0.100: 14.68, 0.050: 16.92, 0.025: 19.02, 0.010: 21.67, 0.005: 23.59},
        10: {0.995: 2.16, 0.990: 2.56, 0.975: 3.25, 0.950: 3.94, 0.900: 4.87, 0.500: 9.34, 0.100: 15.99, 0.050: 18.31, 0.025: 20.48, 0.010: 23.21, 0.005: 25.19},
        11: {0.995: 2.6, 0.990: 3.05, 0.975: 3.82, 0.950: 4.57, 0.900: 5.58, 0.500: 10.34, 0.100: 17.28, 0.050: 19.68, 0.025: 21.92, 0.010: 24.72, 0.005: 26.76},
        12: {0.995: 3.07, 0.990: 3.57, 0.975: 4.4, 0.950: 5.23, 0.900: 6.3, 0.500: 11.34, 0.100: 18.55, 0.050: 21.03, 0.025: 23.34, 0.010: 26.22, 0.005: 28.3},
        13: {0.995: 3.57, 0.990: 4.11, 0.975: 5.01, 0.950: 5.89, 0.900: 7.04, 0.500: 12.34, 0.100: 19.81, 0.050: 22.36, 0.025: 24.74, 0.010: 27.69, 0.005: 29.82},
        14: {0.995: 4.07, 0.990: 4.66, 0.975: 5.63, 0.950: 6.57, 0.900: 7.79, 0.500: 13.34, 0.100: 21.06, 0.050: 23.68, 0.025: 26.12, 0.010: 29.14, 0.005: 31.32},
        15: {0.995: 4.6, 0.990: 5.23, 0.975: 6.27, 0.950: 7.26, 0.900: 8.55, 0.500: 14.34, 0.100: 22.31, 0.050: 25.0, 0.025: 27.49, 0.010: 30.58, 0.005: 32.8},
        16: {0.995: 5.14, 0.990: 5.81, 0.975: 6.91, 0.950: 7.96, 0.900: 9.31, 0.500: 15.34, 0.100: 23.54, 0.050: 26.3, 0.025: 28.85, 0.010: 32.0, 0.005: 34.27},
        17: {0.995: 5.7, 0.990: 6.41, 0.975: 7.56, 0.950: 8.67, 0.900: 10.09, 0.500: 16.34, 0.100: 24.77, 0.050: 27.59, 0.025: 30.19, 0.010: 33.41, 0.005: 35.72},
        18: {0.995: 6.26, 0.990: 7.01, 0.975: 8.23, 0.950: 9.39, 0.900: 10.87, 0.500: 17.34, 0.100: 25.99, 0.050: 28.87, 0.025: 31.53, 0.010: 34.81, 0.005: 37.16},
        19: {0.995: 6.84, 0.990: 7.63, 0.975: 8.91, 0.950: 10.12, 0.900: 11.65, 0.500: 18.34, 0.100: 27.2, 0.050: 30.14, 0.025: 32.85, 0.010: 36.19, 0.005: 38.58},
        20: {0.995: 7.43, 0.990: 8.26, 0.975: 9.59, 0.950: 10.85, 0.900: 12.44, 0.500: 19.34, 0.100: 28.41, 0.050: 31.41, 0.025: 34.17, 0.010: 37.57, 0.005: 40.0},
        21: {0.995: 8.03, 0.990: 8.9, 0.975: 10.28, 0.950: 11.59, 0.900: 13.24, 0.500: 20.34, 0.100: 29.62, 0.050: 32.67, 0.025: 35.48, 0.010: 38.93, 0.005: 41.4},
        22: {0.995: 8.64, 0.990: 9.54, 0.975: 10.98, 0.950: 12.34, 0.900: 14.04, 0.500: 21.34, 0.100: 30.81, 0.050: 33.92, 0.025: 36.78, 0.010: 40.29, 0.005: 42.8},
        23: {0.995: 9.26, 0.990: 10.2, 0.975: 11.69, 0.950: 13.09, 0.900: 14.85, 0.500: 22.34, 0.100: 32.01, 0.050: 35.17, 0.025: 38.08, 0.010: 41.64, 0.005: 44.18},
        24: {0.995: 9.89, 0.990: 10.86, 0.975: 12.4, 0.950: 13.85, 0.900: 15.66, 0.500: 23.34, 0.100: 33.2, 0.050: 36.42, 0.025: 39.36, 0.010: 42.98, 0.005: 45.56},
        25: {0.995: 10.52, 0.990: 11.52, 0.975: 13.12, 0.950: 14.61, 0.900: 16.47, 0.500: 24.34, 0.100: 34.28, 0.050: 37.65, 0.025: 40.65, 0.010: 44.31, 0.005: 46.93},
        26: {0.995: 11.16, 0.990: 12.2, 0.975: 13.84, 0.950: 15.38, 0.900: 17.29, 0.500: 25.34, 0.100: 35.56, 0.050: 38.89, 0.025: 41.92, 0.010: 45.64, 0.005: 48.29},
        27: {0.995: 11.81, 0.990: 12.88, 0.975: 14.57, 0.950: 16.15, 0.900: 18.11, 0.500: 26.34, 0.100: 36.74, 0.050: 40.11, 0.025: 43.19, 0.010: 46.96, 0.005: 49.65},
        28: {0.995: 12.46, 0.990: 13.57, 0.975: 15.31, 0.950: 16.93, 0.900: 18.94, 0.500: 27.34, 0.100: 37.92, 0.050: 41.34, 0.025: 44.46, 0.010: 48.28, 0.005: 50.99},
        29: {0.995: 13.12, 0.990: 14.26, 0.975: 16.05, 0.950: 17.71, 0.900: 19.77, 0.500: 28.34, 0.100: 39.09, 0.050: 42.56, 0.025: 45.72, 0.010: 49.59, 0.005: 52.34},
        30: {0.995: 13.79, 0.990: 14.95, 0.975: 16.79, 0.950: 18.49, 0.900: 20.6, 0.500: 29.34, 0.100: 40.26, 0.050: 43.77, 0.025: 46.98, 0.010: 50.89, 0.005: 53.67},
        40: {0.995: 20.71, 0.990: 22.16, 0.975: 24.43, 0.950: 26.51, 0.900: 29.05, 0.500: 39.34, 0.100: 51.81, 0.050: 55.76, 0.025: 59.34, 0.010: 63.69, 0.005: 66.77},
        50: {0.995: 27.99, 0.990: 29.71, 0.975: 32.36, 0.950: 34.76, 0.900: 37.69, 0.500: 49.33, 0.100: 63.17, 0.050: 67.5, 0.025: 71.42, 0.010: 76.15, 0.005: 79.49},
        60: {0.995: 35.53, 0.990: 37.48, 0.975: 40.48, 0.950: 43.19, 0.900: 46.46, 0.500: 59.33, 0.100: 74.4, 0.050: 79.08, 0.025: 83.3, 0.010: 88.38, 0.005: 91.95},
        70: {0.995: 43.28, 0.990: 45.44, 0.975: 48.76, 0.950: 51.74, 0.900: 55.33, 0.500: 69.33, 0.100: 85.53, 0.050: 90.53, 0.025: 95.02, 0.010: 100.42, 0.005: 104.22},
        80: {0.995: 51.17, 0.990: 53.54, 0.975: 57.15, 0.950: 60.39, 0.900: 64.28, 0.500: 79.33, 0.100: 96.58, 0.050: 101.88, 0.025: 106.63, 0.010: 112.33, 0.005: 116.32},
        90: {0.995: 59.2, 0.990: 61.75, 0.975: 65.65, 0.950: 69.13, 0.900: 73.29, 0.500: 89.33, 0.100: 107.57, 0.050: 113.14, 0.025: 118.14, 0.010: 124.12, 0.005: 128.3},
        100: {0.995: 67.33, 0.990: 70.06, 0.975: 74.22, 0.950: 77.93, 0.900: 82.36, 0.500: 99.33, 0.100: 118.5, 0.050: 124.34, 0.025: 129.56, 0.010: 135.81, 0.005: 140.17},
    }
    if df in tabela and alpha in tabela[df]:
        return tabela[df][alpha]
    else:
        print("❌ Valor de chi² não disponível para df =", df, "e alpha =", alpha)
        return -1

# --- Cálculo do intervalo de confiança ---
def intervalo_confianca_variancia(n, s2, tipo, parametro, alpha):
    df = n - 1

    if tipo == "B":
        chi_inf = chi2_tabela(df, 1 - alpha / 2)
        chi_sup = chi2_tabela(df, alpha / 2)
        li = (df * s2) / chi_sup
        ls = (df * s2) / chi_inf

    elif tipo == "US":
        chi = chi2_tabela(df, alpha)
        li = 0
        ls = (df * s2) / chi

    elif tipo == "UI":
        chi = chi2_tabela(df, 1 - alpha)
        li = (df * s2) / chi
        ls = 999999

    else:
        print("Tipo inválido. Use: B, US ou UI.")
        return 0, 0

    if parametro == "DP":
        li = math.sqrt(li)
        ls = math.sqrt(ls)

    return li, ls

# --- Entrada do utilizador ---
print("Intervalo de Confiança para variância ou desvio")
print("Tipo de intervalo:")
print(" B  - Bilateral")
print(" US - Unilateral superior (limite superior)")
print(" UI - Unilateral inferior (limite inferior)")
print(" B  - Bilateral")
print(" US - Unilateral superior")
print(" UI - Unilateral inferior")
tipo = input("Escolha (B / US / UI): ").strip().upper()

print("Parâmetro a estimar:")
print(" V  - Variância (sigma²)")
print(" DP - Desvio padrão (sigma)")
print(" V  - Variância")
print(" DP - Desvio padrão")
parametro = input("Escolha (V / DP): ").strip().upper()

print("Dados da amostra:")
print("Exemplo: n=20, s²=4.5, alpha=0.01 (para 99%)")
n = int(input("Tamanho da amostra (n): "))
s2 = float(input("Variância amostral (s²): "))
alpha = float(input("Nível de significância (ex: 0.01 para 99%): "))

# --- Cálculo ---
li, ls = intervalo_confianca_variancia(n, s2, tipo, parametro, alpha)

# --- Saída ---
if parametro == "V":
    nome = "σ²"
else:
    nome = "σ"

print("Intervalo de confiança para", nome)
if ls == 999999:
    print("(", li, ", infinito )")
elif li == 0:
    print("( 0 ,", ls, ")")
else:
    print("(", li, ",", ls, ")")
